plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka'
    id 'kotlin-parcelize'
    id 'de.mannodermaus.android-junit5'
    id 'jacoco'
    id 'kotlin-android'
}

def getVersion() {
    def versionPropsFile = rootProject.file("version.properties")
    if (versionPropsFile.exists()) {

        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        return hasProperty('versionName') ? versionName : versionProps['VERSION_NAME']
    } else {
        throw new GradleException("Not found library version.")
    }
}

ext {
    PUBLISH_GROUP_ID = 'io.github.sooyoungjang'
    PUBLISH_VERSION = getVersion()
    PUBLISH_ARTIFACT_ID = 'visibledebugtool'
}

apply from: "${rootDir}/scripts/publish-module.gradle"

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.4.3'
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }

}

kapt {
    correctErrorTypes true
}

dependencies {
    def lifecycle_version = "2.6.1"
    def scope_version = "2.5.1"
    def room_version = "2.4.3"
    def eventbus_version = "3.3.1"
    def datastore_version = "1.0.0"
    def paging_version = "3.1.0"
    def gson_version = "2.8.6"
    def epoxy_Version = "4.4.0"
    def lottie_version = "3.2.0"
    def coroutine_test_version = "1.6.4"
    def mockk_version = "1.12.3"
    def junit5_version = "5.8.2"
    def mockito_version = "3.11.2"
    def fixture_version = "1.2.0"
    def kotest_version = "5.5.3"
    def coreTesting_version = "2.1.0"
    def compose_version = "1.2.1"
    def compose_animation_version = "1.5.1"
    def compose_lifecycle_version = "2.6.1"

    implementation "androidx.lifecycle:lifecycle-runtime-compose:$compose_lifecycle_version"

    implementation "androidx.compose.runtime:runtime:$compose_version"
    // Compose Material Design
    implementation 'androidx.compose.material3:material3:1.0.1'
    // Animations
    implementation "androidx.compose.animation:animation:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    // Integration with ViewModels
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$compose_lifecycle_version"

    // Integration with activities
    implementation "androidx.activity:activity-compose:$compose_animation_version"

    // epoxy
    implementation "com.airbnb.android:epoxy:$epoxy_Version"
    implementation "com.airbnb.android:epoxy-databinding:$epoxy_Version"
    implementation "com.airbnb.android:epoxy-glide-preloading:$epoxy_Version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_Version"

    //lottie
    implementation "com.airbnb.android:lottie:$lottie_version"
//
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    implementation 'androidx.appcompat:appcompat:1.3.0'

    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    implementation "org.greenrobot:eventbus:$eventbus_version"

    implementation "androidx.datastore:datastore-preferences:$datastore_version"
    implementation "androidx.datastore:datastore-core:$datastore_version"

    implementation "androidx.lifecycle:lifecycle-service:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation "com.google.code.gson:gson:$gson_version"

    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation 'androidx.core:core-ktx:1.5.0'

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.8.2")

    testImplementation 'com.google.truth:truth:1.1.3'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutine_test_version"
    testImplementation 'junit:junit:4.13.2'

    testImplementation "io.mockk:mockk:$mockk_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"

    testImplementation "io.kotest:kotest-runner-junit5:$kotest_version"
    testImplementation "io.kotest:kotest-runner-junit4:$kotest_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockito_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "com.appmattus.fixture:fixture:$fixture_version"


    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}